#!/usr/bin/env bash

# Downloads a public stemcell for CPI into /var/vcap/store/stemcells/
#
# Required:
# * $MICRO_BOSH_STEMCELL_NAME - public stemcell name to be downloaded
#                             - if 'custom' the create stemcell from BOSH source
#
# Optional:
# * $PROVIDER - required for 'custom' $MICRO_BOSH_STEMCELL_NAME; e.g. aws, openstack
# * $BOSH_RELEASE_REPO - defaults to https://github.com/cloudfoundry/bosh-release.git

if [[ $EUID -ne 0 ]]; then
  echo "ERROR: This script must be run as root" 1>&2
  exit 1
fi

if [[ "${MICRO_BOSH_STEMCELL_NAME}X" == "X" ]]; then
  echo 'INTERNAL ERROR: Missing $MICRO_BOSH_STEMCELL_NAME environment variable'
  exit 1
fi

if [[ "${MICRO_BOSH_STEMCELL_NAME}" == "custom" ]]; then
  BOSH_RELEASE_REPO=${BOSH_RELEASE_REPO:-'https://github.com/cloudfoundry/bosh-release.git'}
  BOSH_RELEASE_DIRNAME=${BOSH_RELEASE_DIRNAME:-'bosh-release'}
  BOSH_RELEASE_DIR=/var/vcap/store/releases/$BOSH_RELEASE_DIRNAME

  echo "Creating custom stemcell..."

  cd $(dirname $BOSH_RELEASE_DIR)
  if [[ -d $BOSH_RELEASE_DIRNAME ]]; then
    echo "Updating BOSH's own bosh-release for custom stemcell"
    cd $BOSH_RELEASE_DIRNAME
    git pull origin master
  else
    echo "Fetching BOSH's own bosh-release for custom stemcell"
    git clone $BOSH_RELEASE_REPO
    cd $BOSH_RELEASE_DIRNAME
  fi

  echo "Updating source submodules..."
  git submodule update --init

  echo "Creating bosh release (fetching any new blobs)..."
  bosh -n create release --force

  # dev_releases/index.yml contains the dev_releases
  # and its last line contains the latest dev_release name
  # For example:
  # --- 
  # builds: 
  #   4800ad1226e2b673595a8646e8e11bc968ab6ab6: 
  #     version: 119.1-dev
  #   7e0318d711daf0a5fa2e65c0257cd3b6af2ec4e5: 
  #     version: 119.2-dev
  #
  # So to get the latest dev_release name, grab the last line's 2nd token
  # For example, above this would be "119.2-dev"
  LATEST_DEV_RELEASE_NAME=$(tail -n 1 dev_releases/index.yml | awk '{print $2}')
  LATEST_BOSH_RELEASE_PATH=~$BOSH_RELEASE_DIR/dev_release/$LATEST_DEV_RELEASE_NAME.tgz
  MICRO_BOSH_MANIFEST_PATH=$BOSH_RELEASE_DIR/micro/$PROVIDER.yml

  bosh_dir=/var/vcap/store/repos/bosh
  cd $bosh_dir/agent
  echo "Creating custom stemcell..."
  rake stemcell2[$PROVIDER,$MICRO_BOSH_MANIFEST_PATH,$LATEST_BOSH_RELEASE_PATH]

elif [[ -f /var/vcap/store/stemcells/$MICRO_BOSH_STEMCELL_NAME ]]; then
  echo "Stemcell $(pwd)/$MICRO_BOSH_STEMCELL_NAME already exists."

else
  cd /var/vcap/store/stemcells
  echo "Downloading public stemcell $MICRO_BOSH_STEMCELL_NAME"
  # set $COLUMNS manually else progressbar runs `tput cols`.to_i which causes grief
  COLUMNS=80 bosh -n download public stemcell $MICRO_BOSH_STEMCELL_NAME
fi
